<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>职业邮件撰写要点</title>
      <link href="/WriteProfessionalMail/"/>
      <url>/WriteProfessionalMail/</url>
      
        <content type="html"><![CDATA[<p>在职业生涯中，邮件是必不可少的，此文是本人总结的一些撰写邮件的要点。</p><a id="more"></a><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>一封标准邮件基本结构</p><ul><li>收发人</li><li>主题</li><li>称呼</li><li>正文</li><li>签名</li><li>附件</li></ul><h2 id="收发人"><a href="#收发人" class="headerlink" title="收发人"></a>收发人</h2><p>收件人：邮件负责人</p><ul><li>有多个收件人时，按职位排序</li></ul><p>抄送人：需知晓或可能配合的人<br>密送：···</p><table><thead><tr><th align="left">邮件类别</th><th align="left">类别说明</th><th>主送</th><th>抄送</th><th>主送方处理</th><th>抄送方处理</th></tr></thead><tbody><tr><td align="left">报告</td><td align="left">需要收件人知晓进程或结果</td><td>需要报告的上级人员</td><td>需知悉人员</td><td>1、发表意见<br>2、回复知晓<br>3、不回复</td><td>视情况决定是否回复</td></tr><tr><td align="left">请示</td><td align="left">得到指示才能继续</td><td>审批人员，明确1人</td><td>需知悉人员</td><td>需明确答复，24H内明确答复，或告知明确答复时间</td><td>视情况决定是否回复</td></tr><tr><td align="left">会签</td><td align="left">多人发表意见才能继续</td><td>需参与会签人员</td><td>需知悉人员</td><td>明确答复会签意见，时限如上</td><td>视情况决定是否回复</td></tr><tr><td align="left">征求意见</td><td align="left">需要有关人员商洽的</td><td>需发表意见人员</td><td>需知悉人员</td><td>有意见必须回复</td><td>视情况决定是否回复</td></tr><tr><td align="left">通知</td><td align="left">/</td><td>通知适用范围内人员</td><td>需知悉人员</td><td>···</td><td>视情况决定是否回复</td></tr></tbody></table><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>标题简短，明确所传达的内容，切忌使用含义不清的标题<br>一封信针对一个主题最佳，不宜一封信内谈及多件事情<br>回信题目可概括前面内容，例<code>【张三-可以出席会议】Re:关于出席上半年订单状况的会议的邀请</code><br>邮件主题可加前缀，比较灵活，可自定义，有一些以下前缀示例，（情绪性太高的不要用）<br><img src="/image/email/subject.png" width="600"></p><h2 id="称呼"><a href="#称呼" class="headerlink" title="称呼"></a>称呼</h2><p>职位称呼不留”副“<br>称呼例子如下：</p><img src="/image/email/named.png" width="600"><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>正文格式</p><ul><li>开场</li><li>事实</li><li>行动</li><li>致谢</li></ul><h3 id="开场"><a href="#开场" class="headerlink" title="开场"></a>开场</h3><p>用友善的语言单刀直入-表现亲和力，礼貌打招呼，说明邮件背景，例如（群发邮件可以”大家好“）：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>感谢你的来信</td><td>我收到了你的来信</td></tr><tr><td>谢谢你昨天抽出时间参加了我们的会议</td><td>关于昨天你参加的会议</td></tr><tr><td>上次与你的交谈收获很大</td><td>我们谈到过</td></tr><tr><td>非常抱歉，收到您的订单投诉</td><td>接到了你的订单投诉</td></tr><tr><td>诚挚地邀请您参加2019年3月1号的开幕式</td><td>开幕式将在2019年3月1号进行</td></tr><tr><td>请对方回答什么问题？</td><td>我想咨询10台sony 的报价</td></tr><tr><td>要求对方提供什么资源？</td><td>请准备好运维部12月的公办用品</td></tr><tr><td>告知对方什么消息？</td><td>本公司2019年劳动节从5月1号开始房价</td></tr><tr><td>要求对方做什么事情？</td><td>请在3月1日上午来11楼1号会议室参会</td></tr><tr><td>能否满足对方需求？</td><td>很抱歉，我们不接受信用卡预付</td></tr></tbody></table><h3 id="事实"><a href="#事实" class="headerlink" title="事实"></a>事实</h3><p>自问自答，逻辑清晰，阐述事实，例如：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>我为什么要写这封邮件？</td><td>之前发生…..所以…..</td></tr><tr><td>什么是你已经知道的？</td><td>如你所知…..</td></tr><tr><td>什么是你应该知道的？</td><td>我们这边的情况是…..</td></tr><tr><td>哪些细节很重要？</td><td>特别要跟你说的是…..</td></tr><tr><td>我想达到什么目的？</td><td>需要你把…..</td></tr></tbody></table><h3 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h3><p>明确收件人的行动/反馈，把行动描述清楚，具体要做什么 </p><table><thead><tr><th></th></tr></thead><tbody><tr><td>请填写完附件中的计划表后，在周五下班前发给我</td></tr><tr><td>是否能出席下周一的例会，请在周五前反馈</td></tr><tr><td>请在收到邮件后第一时间联系我，我的号码是…..</td></tr></tbody></table><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>谦虚些，殷勤些，例如</p><table><thead><tr><th></th></tr></thead><tbody><tr><td>谢谢你的支持</td></tr><tr><td>如果有任何问题，请与我联系</td></tr><tr><td>期待您的回复</td></tr><tr><td>随时联系，祝一切顺利</td></tr></tbody></table><p>另：在邮件编写回复时可用大于号（&gt;）来引用来信的问题，然后在下一行回答。</p><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>企业邮箱中，下方有提供签名<br>也可自定义签名，按照公司模板</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>以规则名字命名<br>正文有相应提示<br>特殊格式说明打开方式<br>大附件可用网盘<br>多附件压缩打包</p>]]></content>
      
      
      
        <tags>
            
            <tag> career </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JEE基础</title>
      <link href="/JEE-basics/"/>
      <url>/JEE-basics/</url>
      
        <content type="html"><![CDATA[<p>此文章是本人初学JEE时的一些笔记。</p><a id="more"></a><h2 id="企业版应用基础设施要求"><a href="#企业版应用基础设施要求" class="headerlink" title="企业版应用基础设施要求"></a>企业版应用基础设施要求</h2><ul><li>用户身份验证</li><li>多用户支持</li><li>数据保存</li><li>数据完整性</li><li>客户端通信</li><li>与其他应用程序通信</li><li>服务定位援助</li></ul><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>Servlets 是CGI编程的Java实现，在Web服务器上运行和动态生成网页的程序。</p><img src="/image/jee/Servlet_method.png" width="600"><h3 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h3><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html"</span>); <span class="comment">//在输出流前设置content-type header</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">    Enumeration parameterNames =  request.getParameterNames(); <span class="comment">//获得表单字段名枚举类对象</span></span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">while</span>(parameterNames.hasMoreElements()) &#123; <span class="comment">//判断是否还有元素</span></span><br><span class="line">        String parameterName = (String)parameterNames.nextElement();</span><br><span class="line">        out.println(parameterName); <span class="comment">//输出字段名</span></span><br><span class="line">        String[] paramValues = request.getParameterValues(parameterName); <span class="comment">//获得该字段的值数组</span></span><br><span class="line">        <span class="keyword">if</span> (paramValues.length == <span class="number">1</span>) &#123; <span class="comment">//判断是否只有一个值</span></span><br><span class="line">            ···</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ···</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramValues.length; i++) &#123;</span><br><span class="line">                ···</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ···</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    out.clase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>每一个servlet有着同样的周期</p><ol><li><p>服务器加载和初始化servlet    </p><ul><li>要将特定的初始化添加到servlet，需要重写init方法</li></ul></li><li><p>servlet处理0个或更多个客户端请求</p></li><li><p>服务器删除servlet（有些服务器只有当它们关闭的时候才做这一步）</p></li></ol><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>保存客户端的状态-会话跟踪。<br>会话是不同servlets访问客户端时共享的，可以方便多个servlet组成一个应用程序<br>如何使用会话跟踪</p><ul><li><p>从用户中得到一个会话（HttpSession对象）</p><p><code>HttpSession session = request.getSession(true);</code></p></li><li><p>存储或者从HttpSession对象获取数据<br><code>session.setAttribute(name, value);</code><br><code>String value = (String)session.getAttribute(&quot;name&quot;); \\或者session.getValue(&quot;name&quot;)</code></p><p><code>isNew()</code>方法可以判断这个会话是否是新创建的，是就返回true</p></li><li><p>让会话失效（可选）<br><code>session.invalidate();</code></p></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>发送cookie - 实例化cookie<br>  javax.servlet.http.Cookie 类的构成含有一个具有初始名称和值的cookie，可以在更改cookie的its setValue 方法后更改它的值。<br>  Cookie 的名称必须是HTTP/1.1 token<br>  Tokens 是包含没有在RFC 2068中列出的特殊字符的字符串（字母数字字符串作为tokens）<br>  特殊字符是指：<code>&quot;(&quot;, &quot;)&quot;, &quot;&lt;&quot;, &quot;&quot;, &quot;@&quot;, &quot;,&quot;, &quot;;&quot;, &quot;:&quot;, &quot;\\&quot;, &quot;&gt;&quot;, &quot;/&quot;, &quot;[&quot;, &quot;|&quot;, &quot;]&quot;, &quot;?&quot;, &quot;=&quot;, &quot;{&quot;, &quot;}&quot;, SP, HT</code></p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">String value = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">Cookie nameCookie = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, value);</span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        <span class="comment">//添加Cookie 可如下</span></span><br><span class="line">        <span class="comment">//response.addCookie(nameCookie);</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        ···</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookies[]; <span class="comment">//在另一个地方调用cookie值时</span></span><br><span class="line">cookies = request.getCookies(); <span class="comment">//获得Cookies数组</span></span><br><span class="line">String value = cookies[i].getValue(); <span class="comment">//获得Cookie值</span></span><br></pre></td></tr></table></figure><h2 id="redirect-amp-forward"><a href="#redirect-amp-forward" class="headerlink" title="redirect&amp;forward"></a>redirect&amp;forward</h2><p>redirect 重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doGet(request, response) &#123;</span><br><span class="line">    response.sendRedirect(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forward 转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doGet(request, response) &#123;</span><br><span class="line">    request.getRequestDispatcher(<span class="string">"Account"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsp语法"><a href="#jsp语法" class="headerlink" title="jsp语法"></a>jsp语法</h2><p>&lt;% %&gt; ：此脚本将可java代码嵌入到html代码中<br>&lt;%@ page import=”*” %&gt; ：导入java包，相当于<code>import *;</code>  多个包时<code>&lt;%@ page import=&quot;*,*&quot; %&gt;</code><br>&lt;%@ page  %&gt; ：被称为指令Directives<br>                                错误处理指令例子：<code>&lt;%@ page errorPage=&quot;error.jsp&quot;%&gt;</code>(Login.jsp)，<code>&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</code>(Error.jsp)<br>&lt;%@include file=”*.jsp” %&gt; ：（静态包含）页面包含指令（不经常更改的文件）<br>&lt;jsp:include page=”*.jsp” /&gt; ：（动态包含）<br>&lt;%= %&gt; ：被称为表达式Expression, <code>&lt;%=name %&gt;</code>相当于<code>out.print(name);</code><br>&lt;%! ···; %&gt; ： 声明的不会随着所在函数退出后被销毁</p><p>例如：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span> = <span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">Date theDate = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="function">Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> theDate;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="javabean"><a href="#javabean" class="headerlink" title="javabean"></a>javabean</h2><ol><li><p>检查HTML中的输入字段</p></li><li><p>编写一个类，包含字段属性、getter和setter方法，例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在jsp文件中添加相关代码<br>存储数据文件中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id = <span class="string">"user"</span> <span class="class"><span class="keyword">class</span> </span>= <span class="string">"*(包名).UserInfo"</span> scope = <span class="string">"session"</span> &gt;</span><br><span class="line">&lt;jsp:setProperty name = <span class="string">"user"</span> property = <span class="string">"*"</span> /&gt;</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br></pre></td></tr></table></figure><p>引用数据文件中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"*.UserInfo"</span> scope=<span class="string">"session"</span>/&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        Name: &lt;jsp:getProperty name =<span class="string">"user"</span> property=<span class="string">"name"</span>/&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win32编程踩坑记录</title>
      <link href="/win32-trap/"/>
      <url>/win32-trap/</url>
      
        <content type="html"><![CDATA[<p>作为一个小白，以下为我在win32程序中遇到的一些问题</p><a id="more"></a><p><strong>1、在dll中如何使用CString</strong></p><p>​        只要包含atlstr.h头文件就可以了</p><p><strong>2、写文件时如何换行</strong></p><p>​        使用<code>\r\n</code></p><p><strong>3、在使用如<code>str.Format(“%s \r\n”, ch)</code> 时，中间的“.”会报错</strong></p><p>​        加入L，如 <code>str.Format(L“%s \r\n”, ch)</code></p><p><strong>4、CString形式的数据写入文件时每个字符中间会有空格</strong></p><p>​        使用T2A函数，如<code>WriteFile(hFile, T2A(str),····);</code></p><p><strong>5、直接使用T2A，在编译时会出现报错：<code>error C2065: “_lpw”: 未声明的标识符</code></strong></p><p>​        增加头文件<code>#include&lt;atlconv.h&gt;</code><br>​        并在使用T2A等前加上语句 <code>USES_CONVERSION;</code></p><p><strong>6、报错，出现 <code>1&gt;msvcrtd.lib(crtexew.obj) : error LNK2019: 无法解析的外部符号 _WinMain@16,</code></strong></p><p>​        在属性-链接器-系统-子系统，将/subsytem:console改为/subsystem:windows</p><p><strong>7、报错，出现<code>fatal error RC1004: unexpected end of file found</code></strong></p><p>​        在resource.h文件最后加一个回车，即<code>endif</code>后</p><p><strong>8、如何在写文件时追加</strong></p><p>​        用SetFilePointer函数将偏移移到最后再写</p><p><strong>9、如何获取鼠标位置</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPoint pt;</span><br><span class="line">::GetCursorPos(&amp;pt);</span><br><span class="line">x=pt.x;</span><br><span class="line">y=pt.y;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> summary </tag>
            
            <tag> win32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下将hexo搭建的博客迁移到服务器上</title>
      <link href="/mac-hexo-server/"/>
      <url>/mac-hexo-server/</url>
      
        <content type="html"><![CDATA[<p>之前用hexo和github搭建的博客，但是不能备案和被百度收录，并且博客有时还不能访问。所以我想着将博客部署到服务器上，以下为我部署时的过程。</p><a id="more"></a><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="安装-Git-Nginx"><a href="#安装-Git-Nginx" class="headerlink" title="安装 Git Nginx"></a>安装 Git Nginx</h3><p>升级 CentOS 所有包，包括系统版本内核升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum install -y git nginx</span><br></pre></td></tr></table></figure><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>创建文件目录, 用于博客站点文件存放, 并更改目录读写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/www/hexo</span><br><span class="line">chmod -R 755 /data/www/hexo</span><br></pre></td></tr></table></figure><p>添加 index.html 用于检测配置 Nginx 是否成功</p><p><code>vim /data/www/hexo/index.html</code></p><p>添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;Nginx running&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>配置 Nginx 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>找到如下代码, 并修改</p><img src="/image/blog部署到服务器/nginx配置.png" width="600"><p>开启Nginx，访问服务器 IP 或者域名显示，出现了“Nginx running”，即Nginx 配置成功</p><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>创建文件目录, 用于私人 Git 仓库搭建, 并更改目录读写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/GitLibrary</span><br><span class="line">chmod -R 755 /data/GitLibrary</span><br></pre></td></tr></table></figure><p>Git 初始化裸库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /data/GitLibrary</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>创建 Git 钩子(hook)</p><p><code>vim /data/GitLibrary/hexo.git/hooks/post-receive</code></p><p>用于指定 Git 的源代码 和 Git 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/data/www/hexo --git-dir=/data/GitLibrary/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>保存并退出后, 给该文件添加可执行权限</p><p><code>chmod +x /data/GitLibrary/hexo.git/hooks/post-receive</code></p><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><h3 id="hexo-配置"><a href="#hexo-配置" class="headerlink" title="hexo 配置"></a>hexo 配置</h3><p>进入~/myBlog 目录, 修改 Hexo 博客站点配置文件 _config.yml，如下修改:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://hjw322.top</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: root@39.106.208.161:/data/GitLibrary/hexo.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h3 id="SSH-Key-配置"><a href="#SSH-Key-配置" class="headerlink" title="SSH Key 配置"></a>SSH Key 配置</h3><p>这个必须配置，否则不能部署成功，作者在这里耗了几个小时才发现</p><p>创建密钥</p><p><code>ssh-keygen</code></p><p>该命令有一些参数，对于初次接触的，可以直接使用默认的参数。在创建的过程中，系统会提示我们输入私钥的密码和SSH Key存储的位置</p><img src="/image/blog部署到服务器/SSHKey.png" hight="200"><p>根据上图输入的，在当前目录下，会生成一个centos（私钥）和一个centos.pub（公钥）文件，私钥文件如果没有在.ssh目录（该目录在用户的根目录下，是隐藏的目录）下，请挪到该目录下</p><p>上传公钥</p><p>将公钥上传到服务器，可以使用下面的命令实现</p><p><code>sudo ssh root@39.106.208.161 &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt;.ssh/authorized_keys&#39; &lt; ~/centos.pub</code></p><p>之后需要更新本地的信息，用如下命令即可实现</p><p><code>ssh-keygen -R &quot;远程服务器ip&quot;</code></p><img src="/image/blog部署到服务器/SSHKey2.png" hight="62"><p>出现这情况即表明成功</p><h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><p>清除缓存</p><p><code>hexo clean</code></p><p>生成静态页面:</p><p><code>hexo generate</code></p><p>将本地静态页面目录部署到云服务器</p><p><code>hexo deploy</code></p><p>后两条命令可以简写为</p><p><code>hexo g -d</code></p><p>此时，所有操作已经做完，可以开始访问你的博客了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/weixin_42646103/article/details/105181586#__Git__Hexo__225" target="_blank">https://blog.csdn.net/weixin_42646103/article/details/105181586#<strong>Git</strong>Hexo__225</a></p><p><a href="https://cloud.tencent.com/developer/article/1520561" target="_blank">https://cloud.tencent.com/developer/article/1520561</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown总结</title>
      <link href="/Markdown-summary/"/>
      <url>/Markdown-summary/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 .md, .markdown。</p><a id="more"></a><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推</p><h2 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><p>也可以在段落后面使用一个空行来表示重新开始一个段落。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>斜体：* 或 _ ；如<code>*文本*</code>,<code>_文本_</code></p><p>粗体：** 或 __ </p><p>粗斜体：*** 或 ___</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。也可以在星号或是减号中间插入空格。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">****</span><br><span class="line">- - -</span><br><span class="line">___</span><br></pre></td></tr></table></figure><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <del>~ 即可，如`</del>文本~~`</p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现，如<code>&lt;u&gt;文本&lt;/u&gt;</code></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注是对文本的补充说明。Markdown 脚注的格式如下:<code>[^文本]</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号(<em>)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容，如`</em> 文本`</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字并加上 . 号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 文本</span><br><span class="line">2. 文本</span><br></pre></td></tr></table></figure><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 111</span><br><span class="line">- 1.1</span><br></pre></td></tr></table></figure><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 文本1</span><br><span class="line">&gt; 文本2</span><br><span class="line">&gt; 文本3</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="http://picture.hjw322.top/md区块效果.png" width="300"></p><h3 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h3><p>一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推</p><p>与列表嵌套方法类似</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行代码：用反引号，如：<code>文本</code>    </p><p>代码区块：</p><p>代码区块使用 4 个空格或者一个制表符（Tab 键）<br>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）  </p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><code>[链接名称](链接地址) 或者 &lt;链接地址&gt;</code></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></pre><p>也可以使用普通的 <code>&lt;img&gt;</code> 标签</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行，如：</p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐<br>如下：  </p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用<strong>反斜杠</strong>转义特殊字符</p>]]></content>
      
      
      
        <tags>
            
            <tag> summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WhaleCTF WriteUp</title>
      <link href="/WhaleCTF%20WriteUp/"/>
      <url>/WhaleCTF%20WriteUp/</url>
      
        <content type="html"><![CDATA[<p>😁</p><a id="more"></a><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="Decode1"><a href="#Decode1" class="headerlink" title="Decode1"></a>Decode1</h2><p>将文件中的数字放在Hex中</p><img src="https://i.loli.net/2019/08/12/BTipYELuyHlqrWK.jpg" width="300"><p>再将右边的字符串进行URL解码得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MTE5CjEwMQoxMDgKOTkKMTExCjEwOQoxMDEKMTE2CjExMQoxMTgKMTAxCjExMAoxMTcKMTE1</span><br></pre></td></tr></table></figure><p>再base64解码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">119 101 108 99 111 109 101 116 111 118 101 110 117 115</span><br></pre></td></tr></table></figure><p>最后根据ascll表转换为字符型为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">welcometovenus</span><br></pre></td></tr></table></figure><p>最终的flag为key{welcometovenus}</p><h1 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h1><h2 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h2><p>用stegsolve打开，即可看到一个二维码，用微信扫描即可得flag。</p><img src="https://i.loli.net/2019/08/12/KN7jIRaT5ZV8Erw.jpg" width="300"><h2 id="被我吃了"><a href="#被我吃了" class="headerlink" title="被我吃了"></a>被我吃了</h2><p>用Hex fiend打开，在找到jpg文件尾FFD9，分离出504B开头的后缀为zip压缩包，解压后即可得flag。</p><img src="https://i.loli.net/2019/08/12/2qDHwyQnkpIx9uZ.jpg" width="300"><h2 id="合体鲸鱼"><a href="#合体鲸鱼" class="headerlink" title="合体鲸鱼"></a>合体鲸鱼</h2><p>用stegsolve打开，再依次选择Analyse、Frame Browser就会发现有两张图，第二张图中就有flag。</p><img src="https://i.loli.net/2019/08/12/bwdAihv1VF5DTQl.jpg" width="300"><h2 id="亚种"><a href="#亚种" class="headerlink" title="亚种"></a>亚种</h2><p>Hex打开搜索flag。</p><img src="https://i.loli.net/2019/08/12/q82ld6fKCX5Riuw.jpg" width="300"><h2 id="下雨天"><a href="#下雨天" class="headerlink" title="下雨天"></a>下雨天</h2><p>查看16进制文件头，发现为gif文件，则改后缀为gif，然后用stegsolve打开，依次选择Analyse、Frame Browser后查看每一张图即可看到falg；mac电脑直接用预览打开即可查看每一张图片。</p><h2 id="这是什么"><a href="#这是什么" class="headerlink" title="这是什么"></a>这是什么</h2><p>hex打开查看尾部，会发现一串特殊的字符，将这串字符进行unicode转ascll即可得到flag。</p><img src="https://i.loli.net/2019/08/12/GRtu6UbV4yqJQrI.jpg" width="300"><h2 id="IHDR"><a href="#IHDR" class="headerlink" title="IHDR"></a>IHDR</h2><p>在Hex中改图片高度，即可在图片底部看到flag，图片可用stegsolve查看。</p><img src="https://i.loli.net/2019/08/12/fobrR18CuNn5LwO.jpg" width="300"><h2 id="愤怒的小猪"><a href="#愤怒的小猪" class="headerlink" title="愤怒的小猪"></a>愤怒的小猪</h2><p>用stegsolve打开，向左的箭头点一下可看到一个二维码，扫码即可</p><img src="https://i.loli.net/2019/08/12/32CXyW8BiQuGkFN.jpg" width="300"><h2 id="真是动图"><a href="#真是动图" class="headerlink" title="真是动图"></a>真是动图</h2><p>用Hex打开，发现头部应该是gif，但缺少了一部分，在16进制头上加上47494638保存可得到能打开的gif文件查看每一张图片，最后得到的passwd为</p><p><code>Y2F0Y2hfdGhlX2R5bmFtaWNfZmxhZ19pc19xdWl0ZV9zaW1wbGU=</code></p><p>将它进行base64解码即可，最终的flag为</p><p><code>key{catch_the_dynamic_flag_is_quite_simple}</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BugkuCTF】杂项writeup</title>
      <link href="/%E3%80%90BugkuCTF%E3%80%91%E6%9D%82%E9%A1%B9writeup/"/>
      <url>/%E3%80%90BugkuCTF%E3%80%91%E6%9D%82%E9%A1%B9writeup/</url>
      
        <content type="html"><![CDATA[<p>目前的writeup只有前面的一些简单题，其它的题等我会做了，我会更新此文章。</p><a id="more"></a><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>这道题就没有什么说的了，扫二维码。</p><h2 id="这是一张单纯的图片"><a href="#这是一张单纯的图片" class="headerlink" title="这是一张单纯的图片"></a>这是一张单纯的图片</h2><p>Hex Fiend打开，滑到最后，可看到</p><img src="https://i.loli.net/2019/08/10/nrcgqaoVtNBpMCu.jpg" width="300"><p>复制那些特殊的字符串(此为unicode编码）用工具转ascll即可得到flag。</p><p>工具链接：<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a></p><h2 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h2><p>解压缩后发现此图片打不开，这张情况一般是修改了图片的高度或者宽度，用Hex打开，修改图片的高度，再用StegSolve打开即可看到flag。</p><img src="https://i.loli.net/2019/08/10/uz71BcAXdwqNFLn.jpg" width="300"><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>解压后是一个后缀名为pcap的流量包，用Wireshark打开进一步分析。</p><p>右键，依次选择Follow、TCP Stream，即可发现flag。</p><img src="https://i.loli.net/2019/08/11/I9uAYbCyoEKZrTs.jpg" width="300"><h2 id="眼见非实-ISCCCTF"><a href="#眼见非实-ISCCCTF" class="headerlink" title="眼见非实(ISCCCTF)"></a>眼见非实(ISCCCTF)</h2><p>下载后用Hex打开发现文件头为504B，即此文件为一个zip文件，则重命名改后缀为zip。解压后的文件的文件头仍是504B，继续改后缀为zip再解压得到一个文件夹。最后在该文件夹的word文件夹中 document.xml 中发现flag。</p><img src="https://i.loli.net/2019/08/11/c8WN4oytiOXGpMU.jpg" width="300"><h2 id="啊哒"><a href="#啊哒" class="headerlink" title="啊哒"></a>啊哒</h2><p>解压后是一张jpg图片，Hex打开查找文件尾 FFD9 ，可看到它之后有一个zip文件头，从504B开始复制粘贴新建一个文件。也可以使用 binwalk、foremost 等工具分离zip压缩包。</p><img src="https://i.loli.net/2019/08/11/yci82AeH9maV4hq.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/IV8iKlmNDYs6Z3L.jpg" width="300"><p>发现该zip文件需要密码，之前的表情包图片的属性中有个设备型号，将该型号进行16进制解码可得压缩包的密码。</p><img src="https://i.loli.net/2019/08/11/ucqVIjvoA13hawH.jpg" width="300"><p>压缩包打开后可得flag。</p><h2 id="又一张图片，还单纯吗"><a href="#又一张图片，还单纯吗" class="headerlink" title="又一张图片，还单纯吗"></a>又一张图片，还单纯吗</h2><p>使用工具 binwalk 发现该图片有隐藏文件，再使用 foremost 分离出来得到一张含有flag的图片。</p><img src="https://i.loli.net/2019/08/11/p7DQkTzJRKNB8hv.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/258KdOJpFLVhivQ.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/MwP3dclEYTvOkiZ.jpg" width="300"><h2 id="猜"><a href="#猜" class="headerlink" title="猜"></a>猜</h2><p>直接百度识图</p><img src="https://i.loli.net/2019/08/11/Tgwq58WCb2IZdnf.jpg" width="300"><br><img src="https://i.loli.net/2019/08/11/KDFn278koIHiXjT.jpg" width="300"><h2 id="隐写2"><a href="#隐写2" class="headerlink" title="隐写2"></a>隐写2</h2><p>foremost分离出一个压缩包打开后有一张提示图片和一个压缩包，根据提示可知，king、Athens、梅花J，对应数字8、1、7。密码即为这3个数的组合，最终密码为871。</p><p>得到的rar压缩包的文件头为504B，则改后缀为zip。打开后得到一张图片，用Hex打开在尾部发现 f1@g{eTB1IEFyZSBhIGhAY2tlciE=}</p><p>将 eTB1IEFyZSBhIGhAY2tlciE= 用base64解码即可得flag。</p><p>flag为 f1@g{y0u Are a h@cker!}</p><p>对与此压缩包，可以直接用fcrackzip进行爆破。</p><p><img src="https://i.loli.net/2019/08/11/D9253sNmaXAikpl.jpg" width="300"></p><h2 id="多种方法解决"><a href="#多种方法解决" class="headerlink" title="多种方法解决"></a>多种方法解决</h2><p>将exe文件用Hex打开可发现此文件并不是一个真的exe文件。</p><img src="https://i.loli.net/2019/08/11/uUrBknQtyDHYZJ4.jpg" width="300"><p>将右边的文本用base64解码得一张二维码图片，扫码可得flag。</p><p><img src="https://i.loli.net/2019/08/11/29hDsCdF7qMpzH8.jpg" width="300"></p><p>转换工具：<a href="http://imgbase64.duoshitong.com/" target="_blank" rel="noopener">http://imgbase64.duoshitong.com/</a></p><h2 id="闪的好快"><a href="#闪的好快" class="headerlink" title="闪的好快"></a>闪的好快</h2><p>用StegSolve打开，依次选择Analyse、Frame Browser。</p><img src="https://i.loli.net/2019/08/11/C4fYLkjAwbcxd8u.jpg" width="300"><p>18张二维码依次扫描连起来即为flag，为</p><p><code>SYC{F1aSh_so_f4sT}</code></p><h2 id="白哥的鸽子"><a href="#白哥的鸽子" class="headerlink" title="白哥的鸽子"></a>白哥的鸽子</h2><p>增加后缀jpg，在hex中打开发现末尾为</p><img src="https://i.loli.net/2019/08/11/ViNHgYLGj1PEmC6.jpg" width="300"><p>猜测这种形式多半与flag有关，用删栏密码破解得flag</p><img src="https://i.loli.net/2019/08/11/bRNpUunT6HFX8Ef.jpg" width="300"><p>删栏密码破解网站：<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a></p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>连续两次解压后得test文件夹，其含有flag文件，使用<code>cat</code>命令即可看flag。</p><img src="https://i.loli.net/2019/08/11/FRkonWbBi7XpMHC.jpg" width="300"><h2 id="隐写3"><a href="#隐写3" class="headerlink" title="隐写3"></a>隐写3</h2><p>用StegSolve打开，很明显该图片被修改了高度，则在Hex中修改高度即可看到flag。</p><p><img src="https://i.loli.net/2019/08/11/EKv7FCnUmyiJNao.jpg" width="300"></p><h2 id="做个游戏-08067CTF"><a href="#做个游戏-08067CTF" class="headerlink" title="做个游戏(08067CTF)"></a>做个游戏(08067CTF)</h2><p>将heiheihei.jar用JD-GUI打开，在PlaneGameFrame.class中可看到flag</p><p><img src="https://i.loli.net/2019/08/11/svzAL1iWR6tpgnG.jpg" width="300"></p><h2 id="Linux2"><a href="#Linux2" class="headerlink" title="Linux2"></a>Linux2</h2><p>得到的flag文件开头16进制为空，目前不知道怎么做，就根据题目给的提示直接在Hex中搜索KEY，结果还真的有flag。</p><img src="https://i.loli.net/2019/08/11/SMWX1zEbA32oDgV.jpg" width="300"><h2 id="细心的大象"><a href="#细心的大象" class="headerlink" title="细心的大象"></a>细心的大象</h2><p>得到的大象图片中可以分离出一个rar压缩包，只是需要密码，根据题目提示，我们在图片的属性中看到很多信息其中的备注很值得注意，进行base64解码后即为压缩包的密码，打开后修改图片高度即可看到flag。</p><img src="https://i.loli.net/2019/08/11/hmrIzNTkGdFqVyM.jpg" width="300">]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下使用hexo+github简单搭建个人博客</title>
      <link href="/mac-hexo-github-blog/"/>
      <url>/mac-hexo-github-blog/</url>
      
        <content type="html"><![CDATA[<p>本文为我搭建博客时的过程及一些注意事项</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>   去<a href="https://www.jianshu.com/go-wild?ac=2&url=https%3A%2F%2Fnodejs.org%2Fen%2F" target="_blank">Node.js</a>官网下载相应的安装包，一路安装即可。</p><p>   检验安装成功：</p><p>   <code>$ node -v</code></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>   Mac下安装Xcode就自带Git。如果没有Xcode可以参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo官网</a>上的安装方法。</p><p>   检验安装成功：</p><p>   <code>$ Git --version</code></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></h3><p>   安装时注意权限问题，加上sudo，其中-g表示全局安装。</p><p>   <code>$ sudo npm install hexo-cli -g</code></p><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>这一步不是必须的，配置SSH Key的话之后每次更新博客就不用都输入用户名和密码，可以方便一些。</p><h3 id="检查本机上是否已经存在SSH-Key"><a href="#检查本机上是否已经存在SSH-Key" class="headerlink" title="检查本机上是否已经存在SSH Key"></a>检查本机上是否已经存在SSH Key</h3><p>打开终端，输入如下命令</p><p><code>$ cd .ssh</code></p><p><code>$ ls -la</code></p><p>检查终端输出的文件列表中是否已经存在id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，则直接进入第3步。</p><h3 id="创建一个SSH-Key"><a href="#创建一个SSH-Key" class="headerlink" title="创建一个SSH Key"></a>创建一个SSH Key</h3><p>在终端输入如下命令(将<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>改为你注册GitHub时的邮箱地址)</p><p><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p><p>按下回车，让你输入文件名，直接回车会创建使用默认文件名的文件(推荐使用默认文件名)，然后会提示你输入两次密码，可以为空（即直接回车）。</p><h3 id="添加SSH-Key到Github"><a href="#添加SSH-Key到Github" class="headerlink" title="添加SSH Key到Github"></a>添加SSH Key到Github</h3><p>如果你没有指定文件名（也就是使用的默认文件名），那么你的.ssh文件夹下（可以在终端输入open ~/.ssh打开文件夹），应该有一个id_rsa.pub文件了，打开该文件，复制里面的文本（该文本即为ssh key）添加到GitHub的add ssh key中，路径为GitHub-&gt;Setting-&gt;SSH and GPG keys-&gt;New SSH key。Title里填写任意标题，将复制的内容粘贴到key中，点击Add key完成添加。</p><h3 id="检验SSH-Key是否配置成功"><a href="#检验SSH-Key是否配置成功" class="headerlink" title="检验SSH Key是否配置成功"></a>检验SSH Key是否配置成功</h3><p>在终端输入如下命令</p><p><code>$ ssh -T git@github.com</code></p><p>如果出现</p><p><em>Are you sure you want to continue connecting (yes/no)?</em></p><p>请输入yes再按回车。如果最后出现</p><p><em>Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</em></p><p>就说明你的SSH Key配置成功了。</p><h3 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。 Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;ryanlijianchang&quot;//用户名</span><br><span class="line">$ git config --global user.email  &quot;liji.anchang@163.com&quot;//填写自己的邮箱</span><br></pre></td></tr></table></figure><h2 id="博客初始化"><a href="#博客初始化" class="headerlink" title="博客初始化"></a>博客初始化</h2><p>创建存储博客的文件（可以在任意位置），比如命名为myblog，然后在终端cd到myblog之中（此为后面提到的站点）。执行下述命令初始化本地博客，下载一系列文件。</p><p><code>$ hexo init</code></p><p>接下来安装依赖包</p><p><code>$ nom install</code></p><p>注意：若安装报错，可以加上sudo试试。</p><p>到这里本地博客就搭建好了。执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate          或$ hexo g</span><br><span class="line">$ hexo server            或$ hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>就可以进行查看了。</p><p>当然这个博客是本地的，别人是无法访问的，之后我们需要部署到GitHub上。</p><h2 id="本地博客部署到GitHub"><a href="#本地博客部署到GitHub" class="headerlink" title="本地博客部署到GitHub"></a>本地博客部署到GitHub</h2><p>登陆GitHub后新建仓库</p><p>路径为：右上角+号-&gt;new repository</p><p>注意：新建的仓库名称格式为username.github.io。例如我的username是BreadAwesome，那么新创建的仓库的名字便是BreadAwesome.github.io。其它的选项或者需要填写的可以不管，直接create repository。</p><p>终端cd到myblog文件夹下</p><p>编辑文件夹中的_config.yml（即站点配置文件）中的deploy节点（在文档最后部分）</p><p>注意：可以用文本编辑器或Xcode打开，也可以在终端编辑，命令如下：</p><p><code>$ vim _config.yml</code></p><p>配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意：在配置中的冒号后均有空格,如type：后有空格。第一个username为GitHub昵称，第二个为创建仓库时的名称，但一般创建仓库时会使这两个名称是一样的。</p><p>此时repository为这种形式是因为配置了ssh key，如果没有配置ssh key则使用https形式的地址，如下</p><p><em>repository: <a href="https://github.com/username/username.github.io.git" target="_blank" rel="noopener">https://github.com/username/username.github.io.git</a></em></p><p>部署到Github上还需要一个插件hexo-deployer-git</p><p><code>$ npm install hexo-deployer-git --save</code></p><p>若报错，则加上sudo</p><p>再输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean              //清除hexo的缓存</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>deploy可以与generate一样写为d</p><p>若执行hexo g出错则执行<em>npm install hexo –save</em>，若执行hexo d报错为<em>ERROR Deployer not found: git</em>，那么就是你的deployer没有安装成功(可能是安装位置的问题)，你需要执行如下命令再安装一次:</p><p><em>npm install hexo-deployer-git –save</em></p><p>错误修正后再次执行hexo g和hexo d上传到服务器。</p><p>若未关联GitHub，执行hexo d时会提示输入GitHub账号用户名和密码，即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username for &apos;https://github.com&apos;:</span><br><span class="line">password for &apos;https://github.com&apos;:</span><br></pre></td></tr></table></figure><p>hexo d执行成功后便可通过<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 访问博客，看到的内容和<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 相同。</p><p>此时就可以说博客已经搭建好了，本文之后的内容即为博客优化方面，比如主题，绑定域名等。</p><h2 id="更换Hexo主题"><a href="#更换Hexo主题" class="headerlink" title="更换Hexo主题"></a>更换Hexo主题</h2><p>可以选择<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo主题官网页面</a>搜索喜欢的theme，本文我选择hexo-theme-next为例（目前我自己用的主题为<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">yelee</a>）,关于next,如下</p><p>终端cd到myblog文件夹下执行如下所示命令。</p><p><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p><p>注意：下载完后可以查看blog文件夹下的themes文件夹中是否有next文件夹，若没有则前往next版本<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">发布页面</a>选择需要的版本，下载 Download 区域下的 Source Code (zip) 到本地，解压所下载的压缩包至站点的 themes 目录下， 并将解压后的文件夹名称更改为next。</p><p>完成后打开站点配置文件，找到 theme 字段，并将landscape更改为 next。</p><p>可以先验证此主题，在验证之前，可以使用hexo clean来清除hexo的缓存</p><p>验证主题可以看成是一个调试的过程，命令为</p><p><code>$ hexo s --debug</code></p><p> 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p><p> <em>INFO  Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</em></p><p> 此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，检查站点是否正确运行。</p><p> 关于主题其它项目的设定可以访问以下地址：</p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><p>当检查站点是正确运行后，执行如下命令（每次部署文章的步骤）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  //生成缓存和静态文件</span><br><span class="line">$ hexo d  //重新部署到服务器</span><br></pre></td></tr></table></figure><p>以上操作完后，可能要等一段时间才能看到你的更改后的博客界面。</p><p>其余的设置之后再更，谢谢！</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
